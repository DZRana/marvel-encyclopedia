{"version":3,"sources":["components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","components/FilterBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","required","type","placeholder","onKeyDown","Scroll","props","style","overflowY","border","height","children","Card","name","picture","url","imgSrc","path","substr","extension","href","target","rel","alt","src","width","CardList","characters","map","user","i","key","id","thumbnail","urls","FilterBox","filterChange","onChange","privateKey","process","REACT_APP_PRIVATE_KEY","publicKey","REACT_APP_PUBLIC_KEY","hash","md5","request","App","onSearchChange","event","keyCode","value","callAPI","onFilterChange","setState","filterStr","state","loading","fetch","response","json","this","data","results","filteredChars","filter","character","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbf25465.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        required\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"starts with...\"\r\n        onKeyDown={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"800px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ name, picture, url }) => {\r\n  const imgSrc = \"https\" + picture.path.substr(4) + \".\" + picture.extension;\r\n  return (\r\n    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <div className=\"tc bg-red dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt=\"character\" src={imgSrc} width={200} height={200} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n        </div>\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ characters }) => {\r\n  return (\r\n    <div>\r\n      {characters.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={characters[i].id}\r\n            name={characters[i].name}\r\n            picture={characters[i].thumbnail}\r\n            url={characters[i].urls[1].url}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst FilterBox = ({ filterChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"filter results\"\r\n        onChange={filterChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterBox;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport CardList from \"../components/CardList\";\r\nimport FilterBox from \"../components/FilterBox\";\r\nimport \"tachyons\";\r\nimport md5 from \"md5\";\r\n\r\nconst limit = 100;\r\nconst ts = 1;\r\nconst privateKey = process.env.REACT_APP_PRIVATE_KEY;\r\nconst publicKey = process.env.REACT_APP_PUBLIC_KEY;\r\nconst hash = md5(ts + privateKey + publicKey);\r\nconst request = `https://gateway.marvel.com:443/v1/public/characters?limit=${limit}&ts=${ts}&apikey=${publicKey}&hash=${hash}`;\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      characters: [],\r\n      filterStr: \"\",\r\n      loading: false\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const response = await fetch(request);\r\n    const json = await response.json();\r\n    this.setState({ characters: json.data.results });\r\n  }\r\n\r\n  async callAPI(event) {\r\n    this.setState({ loading: true });\r\n    const response = await fetch(\r\n      `${request}&nameStartsWith=${event.target.value}`\r\n    );\r\n    const json = await response.json();\r\n    this.setState({ characters: json.data.results, loading: false });\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    if (event.keyCode === 13 && event.target.value !== \"\") {\r\n      this.callAPI(event);\r\n    }\r\n  };\r\n\r\n  onFilterChange = event => {\r\n    this.setState({ filterStr: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { characters, filterStr, loading } = this.state;\r\n    const filteredChars = characters.filter(character => {\r\n      return character.name.toLowerCase().includes(filterStr.toLowerCase());\r\n    });\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Marvel Encyclopedia</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <FilterBox filterChange={this.onFilterChange} />\r\n        <Scroll>\r\n          {!characters.length && !loading && <h2>No Results</h2>}\r\n          {loading && <h2>Loading</h2>}\r\n          {!loading && <CardList characters={filteredChars} />}\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}