{"version":3,"sources":["components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardList.js","components/FilterBox.js","apis/marvel.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","onSearchSubmit","useState","character","setCharacter","className","onSubmit","event","preventDefault","required","type","placeholder","value","onChange","target","Scroll","props","style","overflowY","border","height","children","Card","name","picture","url","imgSrc","path","substr","extension","href","rel","alt","src","width","CardList","characters","map","user","i","key","id","thumbnail","urls","FilterBox","onFilterChange","filterStr","setFilterStr","onFilterChangeInstance","publicKey","process","hash","md5","ts","axios","create","baseURL","params","limit","apikey","App","setCharacters","loadingFlag","setLoadingFlag","initialSearch","a","marvel","get","response","data","results","nameStartsWith","filteredChars","filter","toLowerCase","includes","useEffect","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f877bd32.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst SearchBox = ({ onSearchSubmit }) => {\r\n  const [character, setCharacter] = useState(\"\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    onSearchSubmit(character);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pa2\">\r\n      <form onSubmit={onFormSubmit}>\r\n        <input\r\n          required\r\n          className=\"pa3 ba b--green bg-lightest-blue\"\r\n          type=\"text\"\r\n          placeholder=\"starts with...\"\r\n          value={character}\r\n          onChange={(event) => setCharacter(event.target.value)}\r\n        />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"1px solid black\",\r\n        height: \"800px\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ name, picture, url }) => {\r\n  const imgSrc = \"https\" + picture.path.substr(4) + \".\" + picture.extension;\r\n  return (\r\n    <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      <div className=\"tc bg-red dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt=\"character\" src={imgSrc} width={200} height={200} />\r\n        <div>\r\n          <h2>{name}</h2>\r\n        </div>\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ characters }) => {\r\n  return (\r\n    <div>\r\n      {characters.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={characters[i].id}\r\n            name={characters[i].name}\r\n            picture={characters[i].thumbnail}\r\n            url={characters[i].urls[1].url}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React, { useState } from \"react\";\r\n\r\nconst FilterBox = ({ onFilterChange }) => {\r\n  const [filterStr, setFilterStr] = useState(\"\");\r\n\r\n  const onFilterChangeInstance = (event) => {\r\n    setFilterStr(event.target.value);\r\n    onFilterChange(event);\r\n  };\r\n\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"filter results\"\r\n        value={filterStr}\r\n        onChange={(event) => onFilterChangeInstance(event)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterBox;\r\n","import axios from \"axios\";\r\nimport md5 from \"md5\";\r\n\r\nconst limit = 100;\r\nconst ts = 1;\r\nconst privateKey = process.env.REACT_APP_PRIVATE_KEY;\r\nconst publicKey = process.env.REACT_APP_PUBLIC_KEY;\r\nconst hash = md5(ts + privateKey + publicKey);\r\n//const request = `https://gateway.marvel.com:443/v1/public/characters?limit=${limit}&ts=${ts}&apikey=${publicKey}&hash=${hash}`;\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://gateway.marvel.com:443/v1/public\",\r\n  params: {\r\n    limit,\r\n    ts,\r\n    apikey: publicKey,\r\n    hash,\r\n  },\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport CardList from \"../components/CardList\";\r\nimport FilterBox from \"../components/FilterBox\";\r\nimport \"tachyons\";\r\nimport marvel from \"../apis/marvel\";\r\n\r\nconst App = () => {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [filterStr, setFilterStr] = useState(\"\");\r\n  const [loadingFlag, setLoadingFlag] = useState(false);\r\n\r\n  const initialSearch = async () => {\r\n    const response = await marvel.get(\"/characters\");\r\n    setCharacters(response.data.data.results);\r\n  };\r\n\r\n  const onSearchSubmit = async (character) => {\r\n    setLoadingFlag(true);\r\n    const response = await marvel.get(\"/characters\", {\r\n      params: { nameStartsWith: character },\r\n    });\r\n    setCharacters(response.data.data.results);\r\n    setLoadingFlag(false);\r\n  };\r\n\r\n  const onFilterChange = (event) => {\r\n    setFilterStr(event.target.value);\r\n  };\r\n\r\n  const filteredChars = characters.filter((character) => {\r\n    return character.name.toLowerCase().includes(filterStr.toLowerCase());\r\n  });\r\n\r\n  useEffect(() => {\r\n    initialSearch();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tc\">\r\n      <h1 className=\"f1\">Marvel Encyclopedia</h1>\r\n      <SearchBox onSearchSubmit={onSearchSubmit} />\r\n      <FilterBox onFilterChange={onFilterChange} />\r\n      <Scroll>\r\n        {!characters.length && !loadingFlag && <h2>No Results</h2>}\r\n        {loadingFlag && <h2>Loading</h2>}\r\n        {!loadingFlag && <CardList characters={filteredChars} />}\r\n      </Scroll>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}